print(Hello)
print("Hello")
library(tidyverse)
library(lubridate)
library(survival)
library(survminer)
# Dataset of List of pitchers having received tommy john
setwd("C:/Users/pgill/Documents/Data Science Portfolio/TJ_survival")
tj_list <- read_csv("tj_list_mlb.csv")
tj_list$`TJ Surgery Date` <- mdy(tj_list$`TJ Surgery Date`)
tj_list <- tj_list %>%
select(Player:Position, Age, mlbamid, fgid) %>%
filter(Position == "P", Level == "MLB") %>%
arrange(mlbamid)
tj_list <- tj_list %>%
arrange(`TJ Surgery Date`, mlbamid)
tj_list$Team <- as.factor(tj_list$Team)
tj_list$Player[duplicated(tj_list$Player) == TRUE]
#tj_list$mlbamid[duplicated(tj_list$mlbamid) == TRUE]
multiple_tj <- tj_list$Player[duplicated(tj_list$Player) == TRUE]
# The 'Team' variable assumes that a player started with and stayed with a team throughout rehab.
# At this point, I am only assessing by the team at time of the surgery although changing teams is certainly going to influence thing
# Load in the pitching appearance data
setwd("C:/Users/pgill/Documents/Data Science Portfolio/TJ_survival/Appearance data/baseballdatabank-2019.2/baseballdatabank-2019.2/core/")
people <- read_csv("People.csv")
people <- people %>%
select(playerID, nameFirst, nameLast, nameGiven, finalGame)
pitchers <-  read_csv("Pitching.csv")
pitchers <- pitchers %>%
select(playerID) %>%
arrange(playerID) %>%
unique.data.frame()
################
#####
# There would be a better way of doing this but try to identify if any of the players with multiple TJ's
# overlap with the players with the same name.
#for (k in 1:length(multiple_tj)) {
#  for (l in 1:length(pitchers_duplicated)) {
#    if (multiple_tj[k] == pitchers_duplicated[l]) {
#      print(multiple_tj[k])
#    }
#    else {
#      print("No Match")
#    }
#  }
#}
# Join the pitchers and people tables. This didn't work though so need to remove all the duplicates first
pitcher_list <- inner_join(people, pitchers, "playerID")
pitcher_list$Player <- paste(pitcher_list$nameFirst,  pitcher_list$nameLast)
pitcher_list <- pitcher_list %>% filter(finalGame >= 1970-01-01)
pitcher_list$Player[duplicated(pitcher_list$Player) == TRUE]
pitchers_duplicated <- pitcher_list$Player[duplicated(pitcher_list$Player) == TRUE]
pitchers_duplicated <- as.data.frame(pitchers_duplicated)
colnames(pitchers_duplicated) <- "Player"
pitchers_duplicated_df <- pitcher_list[duplicated(pitcher_list$Player) == TRUE,]
pitcher_list <- pitcher_list %>%
anti_join(pitchers_duplicated_df, by = "Player")
tj_final_game <- inner_join(tj_list, pitcher_list, "Player")
# There are 25 fewer rows here than in tj_list which I don't know why they're missing.
tj_final_game <- tj_final_game %>%
select(Player:Team, Age:playerID, finalGame)
colnames(tj_final_game) <- c("Player", "TJ_Surgery_Date", "Team", "Age", "mlbamid", "fgid", "playerID", "finalGame")
tj_final_game
# No matches between pitchers with multiple TJs and pitchers with the same name
# The most recent of the final games are 2018 so I think I should remove all players with a TJ Surgery Date in 2019.
tj_final_game <- tj_final_game %>%
filter(TJ_Surgery_Date < "2015-01-01")
# CENSORING
# How to do the censoring is more complicated. I think classifying final games in 2018 as censored. Can reassess this
# at a later date.
# Final game is the "time of death" unless they had a second TJ which should be the "time of death".
tj_final_game$Player[duplicated(tj_final_game$Player) == TRUE]
tj_final_game <- tj_final_game %>% arrange(Player)
tj_final_game$censor <- rep(NA, 322)
# This marks final games in 2018 as censored
for (i in 1:322) { # Hard coded lenght of the df which is not ideal.
if (tj_final_game$finalGame[i] >= "2018-01-01") {
#print(tj_final_game$Player[i])
#sum <- sum + 1
#print(sum)
tj_final_game$censor[i] <- 0
}
else {
tj_final_game$censor[i] <- 1
}
}
# This marks 2nd TJ as a "death"
for (i in 1:321) {
if (tj_final_game$Player[i] == tj_final_game$Player[i + 1]) {
#print(tj_final_game$Player[i])
tj_final_game$censor[i + 1] <- 1
}
}
# Calculating the amount of time between TJ surgery and the final game.
# If the player never returned to the majors following surgery, assuming the surgery was before 2018, they are considered
# retired at time of surgery to avoid any negative values.
tj_final_game$time <- tj_final_game$finalGame - tj_final_game$TJ_Surgery_Date
for (i in 1:322) {
if (tj_final_game$time[i] < 0) {
tj_final_game$time[i] <- 0
}
}
# Move onto data analysis now and I can come back to sort the cleaning out later. The basic format I need is in place.
# ANALYSIS
# Simple descriptive stats
ggplot(aes(x = reorder(Team, Team, function(x) -length(x)), fill = Team), data = tj_final_game) +
geom_bar() +
theme(legend.position = "none") +
ylab("Number of Tommy John Surgeries") +
xlab("MLB Team")
tj_plot <- survfit(Surv(time, censor) ~ 1, data = tj_final_game)
ggsurvplot(tj_plot, data = tj_final_game,
conf.int = TRUE,
pval = TRUE,
risk.table = TRUE)
tj_plotXteam <- survfit(Surv(time, censor) ~ Team, data = tj_final_game)
ggsurvplot(tj_plotXteam, data = tj_final_game,
conf.int = FALSE,
pval = TRUE,
risk.table = FALSE)
?facet_wrap
ggsurvplot(tj_plotXteam, data = tj_final_game,
conf.int = FALSE,
pval = TRUE,
risk.table = FALSE) +
facet_wrap(Team)
ggsurvplot(tj_plotXteam, data = tj_final_game,
conf.int = FALSE,
pval = TRUE,
risk.table = FALSE) +
facet_wrap(vars(Team))
ggsurvplot_facet(tj_plotXteam, data = tj_final_game,
facet.by = "Team")
ggsurvplot_facet(tj_plotXteam, data = tj_final_game, facet.by = "Team")
ggsurvplot(tj_plotXteam, data = tj_final_game, facet.by = "Team")
ggsurvplot(tj_plotXteam, data = tj_final_game,
conf.int = FALSE,
pval = TRUE,
risk.table = FALSE)
ggsurvplot(tj_plotXteam, data = tj_final_game,
conf.int = FALSE,
pval = TRUE,
risk.table = FALSE) +
facet_grid(.~Team)
tj_plotXteam <- survfit(Surv(time, censor) ~ 1, data = tj_final_game)
ggsurvplot(tj_plotXteam, data = tj_final_game,
conf.int = FALSE,
pval = TRUE,
risk.table = FALSE) +
facet_grid(.~Team)
ggsurvplot(tj_plotXteam, data = tj_final_game, facet.by = "Team"
conf.int = FALSE,
pval = TRUE,
risk.table = FALSE)
ggsurvplot(tj_plotXteam, data = tj_final_game, facet.by = "Team",
conf.int = FALSE,
pval = TRUE,
risk.table = FALSE)
ggsurvplot(tj_plotXteam, data = tj_final_game,
conf.int = FALSE,
pval = TRUE,
risk.table = FALSE)
tj_plotXteam <- survfit(Surv(time, censor) ~ Team1, data = tj_final_game)
tj_plotXteam <- survfit(Surv(time, censor) ~ Team, data = tj_final_game)
ggsurvplot(tj_plotXteam, data = tj_final_game,
conf.int = FALSE,
pval = TRUE,
risk.table = FALSE)
ggsurvplot(tj_plotXteam, facet.by = "Team")
#install.packages("tidyverse")
#install.packages("lubridate")
#install.packages("survival")
#install.packages("survminer")
install.packages("magrittr")
#install.packages("tidyverse")
#install.packages("lubridate")
#install.packages("survival")
#install.packages("survminer")
install.packages("magrittr")
install.packages("magrittr")
library(magrittr)
tj_plotXteam <- survfit(Surv(time, censor) ~ Team, data = tj_final_game)
ggsurvplot(tj_plotXteam, facet.by = "Team")
library(tidyverse)
library(lubridate)
library(survival)
library(survminer)
library(magrittr)
tj_plotXteam <- survfit(Surv(time, censor) ~ Team, data = tj_final_game)
ggsurvplot(tj_plotXteam, facet.by = "Team")
ggsurvplot(tj_plotXteam)
ggsurvplot(tj_plotXteam, pval = TRUE)
# I couldn't get the faceting to work at all so trying something from the developer. The faceting is a known issue with survminer.
survfit(Surv(time, censor) ~ Team,
data = tj_final_game, group.by = "Team") %>%
ggsurvplot(ggtheme = theme_bw()) %>%
purr::map(function(ggsurv) {ggsurv$plot}) %>%
ggpubr::ggarrange(plotlist = .)
# I couldn't get the faceting to work at all so trying something from the developer. The faceting is a known issue with survminer.
survfit(Surv(time, censor) ~ Team,
data = tj_final_game, facet.by = "Team") %>%
ggsurvplot(ggtheme = theme_bw()) %>%
purr::map(function(ggsurv) {ggsurv$plot}) %>%
ggpubr::ggarrange(plotlist = .)
# I couldn't get the faceting to work at all so trying something from the developer. The faceting is a known issue with survminer.
survfit(Surv(time, censor) ~ Team,
data = tj_final_game) %>%
ggsurvplot(ggtheme = theme_bw()) %>%
purr::map(function(ggsurv) {ggsurv$plot}) %>%
ggpubr::ggarrange(plotlist = .)
?`purrr-package`
#install.packages("tidyverse")
#install.packages("lubridate")
#install.packages("survival")
#install.packages("survminer")
#install.packages("magrittr")
install.packages("purr")
sessionInfo()
library(purrr)
# I couldn't get the faceting to work at all so trying something from the developer. The faceting is a known issue with survminer.
survfit(Surv(time, censor) ~ Team,
data = tj_final_game) %>%
ggsurvplot(ggtheme = theme_bw()) %>%
purr::map(function(ggsurv) {ggsurv$plot}) %>%
ggpubr::ggarrange(plotlist = .)
# I couldn't get the faceting to work at all so trying something from the developer. The faceting is a known issue with survminer.
surv_fit(Surv(time, censor) ~ Team,
data = tj_final_game) %>%
ggsurvplot(ggtheme = theme_bw()) %>%
purr::map(function(ggsurv) {ggsurv$plot}) %>%
ggpubr::ggarrange(plotlist = .)
tj_plotXteam <- surv_fit(Surv(time, censor) ~ Team, data = tj_final_game)
ggsurvplot(tj_plotXteam, pval = TRUE)
.libPaths()
tj_plotXteam <- survfit(Surv(time, censor) ~ Team, data = tj_final_game)
ggsurvplot(tj_plotXteam, pval = TRUE)
# I couldn't get the faceting to work at all so trying something from the developer. The faceting is a known issue with survminer.
ggsurvplot(surv_fit(Surv(time, censor) ~ Team, data = tj_final_game), data = tj_final_game)
# I couldn't get the faceting to work at all so trying something from the developer. The faceting is a known issue with survminer.
ggsurvplot(surv_fit(Surv(time, censor) ~ Team, data = tj_final_game), data = tj_final_game, facet.by = "Team")
# I couldn't get the faceting to work at all so trying something from the developer. The faceting is a known issue with survminer.
ggsurvplot(tj_plotXteam, pval = TRUE)$plot + theme_bw() + facet_grid(Team)
# I couldn't get the faceting to work at all so trying something from the developer. The faceting is a known issue with survminer.
ggsurvplot(tj_plotXteam, pval = TRUE)$plot + theme_bw() + facet_grid("Team")
# I couldn't get the faceting to work at all so trying something from the developer. The faceting is a known issue with survminer.
ggsurvplot(tj_plotXteam, pval = FALSE)$plot + theme_bw() + facet_grid("Team")
# I couldn't get the faceting to work at all so trying something from the developer. The faceting is a known issue with survminer.
g <- ggsurvplot(tj_plotXteam, pval = FALSE)$plot + theme_bw() + facet_grid("Team")
g
ggsave(g, height = 12, width = 12)
# I couldn't get the faceting to work at all so trying something from the developer. The faceting is a known issue with survminer.
g <- ggsurvplot(tj_plotXteam, pval = FALSE)$plot + theme_bw() + facet_grid("Team", space = "free_y")
g
# I don't think I can get facet to show plots in an appropriate size so I will have to do them individually.
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "ARI", ]))
levels(tj_final_game$Team)
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "BOS", ]))
# I don't think I can get facet to show plots in an appropriate size so I will have to do them individually.
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "ARI", ]))
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "ATL", ]))
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "BAL", ]))
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "BOS", ]))
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "CHC", ]))
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "CHW", ]))
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "CIN", ]))
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "CLE", ]))
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "COL", ]))
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "DET", ]))
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "HOU", ]))
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "KC", ]))
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "LAA", ]))
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "LAD", ]))
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "MIA", ]))
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "MIL", ]))
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "MIN", ]))
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "NYM", ]))
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "NYY", ]))
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "OAK", ]))
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "PHI", ]))
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "PIT", ]))
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "SD", ]))
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "SEA", ]))
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "SF", ]))
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "STL", ]))
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "TB", ]))
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "TEX", ]))
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "TOR", ]))
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "WAS", ]))
# I don't think I can get facet to show plots in an appropriate size so I will have to do them individually.
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "ARI", ]),
risk.table = TRUE)
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "ATL", ]),
risk.table = TRUE)
# I don't think I can get facet to show plots in an appropriate size so I will have to do them individually.
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "ARI", ]),
risk.table = TRUE)
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "ATL", ]),
risk.table = TRUE)
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "BAL", ]),
risk.table = TRUE)
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "BOS", ]),
risk.table = TRUE)
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "CHC", ]),
risk.table = TRUE)
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "CHW", ]),
risk.table = TRUE)
# I don't think I can get facet to show plots in an appropriate size so I will have to do them individually.
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "ARI", ]),
risk.table = TRUE)
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "ATL", ]),
risk.table = TRUE)
# I don't think I can get facet to show plots in an appropriate size so I will have to do them individually.
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "ARI", ]),
risk.table = TRUE, ncensor.plot = TRUE)
# I don't think I can get facet to show plots in an appropriate size so I will have to do them individually.
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "ARI", ]),
risk.table = TRUE, surv.median.line = "hv")
# I don't think I can get facet to show plots in an appropriate size so I will have to do them individually.
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "ARI", ]),
risk.table = TRUE, surv.median.line = "hv")
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "ATL", ]),
risk.table = TRUE, surv.median.line = "hv")
?ggsurvplot
# I don't think I can get facet to show plots in an appropriate size so I will have to do them individually.
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "ARI", ]),
risk.table = TRUE, surv.median.line = "hv", cumevents = TRUE)
# I don't think I can get facet to show plots in an appropriate size so I will have to do them individually.
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "ARI", ]),
risk.table = TRUE, surv.median.line = "hv", cumevents = FALSE, cumcensor = TRUE)
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "ATL", ]),
risk.table = TRUE, surv.median.line = "hv", cumcensor = TRUE)
# I don't think I can get facet to show plots in an appropriate size so I will have to do them individually.
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "ARI", ]),
risk.table = TRUE, surv.median.line = "hv", cumcensor = FALSE)
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "ATL", ]),
risk.table = TRUE, surv.median.line = "hv", cumcensor = FALSE)
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "ATL", ]),
risk.table = TRUE, surv.median.line = "hv", cumcensor = TRUE)
# I don't think I can get facet to show plots in an appropriate size so I will have to do them individually.
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "ARI", ]),
risk.table = TRUE, surv.median.line = "hv")
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "ATL", ]),
risk.table = TRUE, surv.median.line = "hv")
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "BAL", ]),
risk.table = TRUE, surv.median.line = "hv")
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "BOS", ]),
risk.table = TRUE, surv.median.line = "hv")
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "CHC", ]),
risk.table = TRUE, surv.median.line = "hv")
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "CHW", ]),
risk.table = TRUE, surv.median.line = "hv")
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "CIN", ]),
risk.table = TRUE, surv.median.line = "hv")
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "CLE", ]),
risk.table = TRUE, surv.median.line = "hv")
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "COL", ]),
risk.table = TRUE, surv.median.line = "hv")
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "DET", ]),
risk.table = TRUE, surv.median.line = "hv")
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "HOU", ]),
risk.table = TRUE, surv.median.line = "hv")
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "KC", ]),
risk.table = TRUE, surv.median.line = "hv")
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "LAA", ]),
risk.table = TRUE, surv.median.line = "hv")
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "LAD", ]),
risk.table = TRUE, surv.median.line = "hv")
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "MIA", ]),
risk.table = TRUE, surv.median.line = "hv")
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "MIL", ]),
risk.table = TRUE, surv.median.line = "hv")
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "MIN", ]),
risk.table = TRUE, surv.median.line = "hv")
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "NYM", ]),
risk.table = TRUE, surv.median.line = "hv")
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "NYY", ]),
risk.table = TRUE, surv.median.line = "hv")
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "OAK", ]),
risk.table = TRUE, surv.median.line = "hv")
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "PHI", ]),
risk.table = TRUE, surv.median.line = "hv")
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "PIT", ]),
risk.table = TRUE, surv.median.line = "hv")
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "SD", ]),
risk.table = TRUE, surv.median.line = "hv")
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "SEA", ]),
risk.table = TRUE, surv.median.line = "hv")
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "SF", ]),
risk.table = TRUE, surv.median.line = "hv")
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "STL", ]),
risk.table = TRUE, surv.median.line = "hv")
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "TB", ]),
risk.table = TRUE, surv.median.line = "hv")
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "TEX", ]),
risk.table = TRUE, surv.median.line = "hv")
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "TOR", ]),
risk.table = TRUE, surv.median.line = "hv")
ggsurvplot(survfit(Surv(time, censor) ~ 1, data = tj_final_game[tj_final_game$Team == "WAS", ]),
risk.table = TRUE, surv.median.line = "hv")
# ANALYSIS
# Simple descriptive stats
ggplot(aes(x = reorder(Team, Team, function(x) -length(x)), fill = Team), data = tj_final_game) +
geom_bar() +
theme(legend.position = "none") +
ylab("Number of Tommy John Surgeries") +
xlab("MLB Team")
