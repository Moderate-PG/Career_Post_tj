print(Hello)
print("Hello")
library(tidyverse)
library(lubridate)
# Dataset of List of pitchers having received tommy john
setwd("C:/Users/pgill/Documents/Data Science Portfolio/TJ_survival")
tj_list <- read_csv("tj_list_mlb.csv")
tj_list$`TJ Surgery Date` <- mdy(tj_list$`TJ Surgery Date`)
tj_list <- tj_list %>%
select(Player:Position, Age, mlbamid, fgid) %>%
filter(Position == "P", Level == "MLB") %>%
arrange(mlbamid)
tj_list <- tj_list %>%
arrange(`TJ Surgery Date`, mlbamid)
tj_list$Team <- as.factor(tj_list$Team)
tj_list$Player[duplicated(tj_list$Player) == TRUE]
#tj_list$mlbamid[duplicated(tj_list$mlbamid) == TRUE]
multiple_tj <- tj_list$Player[duplicated(tj_list$Player) == TRUE]
# Load in the pitching appearance data
setwd("C:/Users/pgill/Documents/Data Science Portfolio/TJ_survival/Appearance data/baseballdatabank-2019.2/baseballdatabank-2019.2/core/")
people <- read_csv("People.csv")
people <- people %>%
select(playerID, nameFirst, nameLast, nameGiven, finalGame)
pitchers <-  read_csv("Pitching.csv")
pitchers <- pitchers %>%
select(playerID) %>%
arrange(playerID) %>%
unique.data.frame()
pitchers
################
#####
# There would be a better way of doing this but try to identify if any of the players with multiple TJ's
# overlap with the players with the same name.
for (k in 1:length(multiple_tj)) {
for (l in 1:length(pitchers_duplicated)) {
if (multiple_tj[k] == pitchers_duplicated[l]) {
print(multiple_tj[k])
}
else {
print("No Match")
}
}
}
pitcher_list <- inner_join(people, pitchers, "playerID")
pitcher_list
pitcher_list$Player <- paste(pitcher_list$nameFirst,  pitcher_list$nameLast)
pitcher_list
pitcher_list <- pitcher_list %>% filter(finalGame >= 1970-01-01)
pitcher_list
pitcher_list$Player[duplicated(pitcher_list$Player) == TRUE]
pitchers_duplicated <- pitcher_list$Player[duplicated(pitcher_list$Player) == TRUE]
pitchers_duplicated <- as.data.frame(pitchers_duplicated)
pitchers_duplicated
colnames(pitchers_duplicated) <- "Player"
pitchers_duplicated
pitcher_list %>%
filter(Player == "Rich Thompson")
pitcher_list %>%
unique(Player)
pitcher_list %>%
unique(pitcher_list$Player)
unique(pitcher_list$Player)
pitcher_list[unique(pitcher_list$Player)]
pitcher_list[unique(pitcher_list$Player), ]
unique(pitcher_list$Player)
duplicated(pitcher_list$Player)
pitcher_list[duplicated(pitcher_list$Player) == TRUE,]
pitchers_duplicated_df <- pitcher_list[duplicated(pitcher_list$Player) == TRUE,]
pitchers_duplicated_df
pitcher_list %>% filter(Player == "Austin Adams")
pitcher_list
pitcher_list <- pitcher_list %>%
anti_join(pitchers_duplicated_df, by = "Player")
pitcher_list
4921-4804
duplicated(pitcher_list$Player)
sum(duplicated(pitcher_list$Player))
tj_list
tj_final_game <- inner_join(tj_list, pitcher_list, "Player")
tj_final_game
429-404
# There are 25 fewer rows here than in tj_list which I don't know why they're missing.
tj_final_game <- tj_final_game %>%
select(Player:Team, Age:playerID, finalGame)
tj_final_game
duplicated(tj_final_game$Player)
tj_final_game$Player[duplicated(tj_final_game$Player) == TRUE]
multiple_tj
tj_list %>%
filter(Player == Al Reyes)
tj_list %>%
filter(Player == "Al Reyes")
tj_final_game
#install.packages("tidyverse")
#install.packages("lubridate")
install.packages("survival")
library(survival)
tj_final_game
tj_final_game %>%
filter(finalGame > 2019-01-01)
tj_final_game
tj_final_game %>%
filter(finalGame > "2019-01-01")
tj_final_game %>%
filter(finalGame > "2018-01-01")
tj_final_game %>%
arrange(desc(finalGame))
tj_final_game %>%
arrange(desc('TJ Surgery Date'))
tj_final_game %>%
arrange("TJ Surgery Date")
tj_final_game
colnames(tj_final_game)
colnames(tj_final_game) <- c("Player", "TJ_Surgery_Date", "Team", "Age", "mlbamid", "fgid", "playerID", "finalGame")
tj_final_game
tj_final_game %>%
arrange(desc(TJ_Surgery_Date))
tj_final_game %>%
arrange(desc(finalGame))
# The most recent of the final games are 2018 so I think I should remove all players with a TJ Surgery Date in 2019.
# CENSORING
# How to do the censoring is more complicated. I think classifying final games in 2018 as censored. Can reassess this
# at a later date.
tj_final_game$event[tj_final_game$finalGame < "2018-01-01"] <- 1
tj_final_game
tj_fimal
tj_final_game %>%
arrange(event)
tj_final_game %>%
filter(event == 0)
# The most recent of the final games are 2018 so I think I should remove all players with a TJ Surgery Date in 2019.
# CENSORING
# How to do the censoring is more complicated. I think classifying final games in 2018 as censored. Can reassess this
# at a later date.
sum(tj_final_game$event)
tj_final_game
tj_final_game$event <- NULL
tj_final_game
dim(tj_final_game)
?ifelse
tj_final_game %>%
arrange(finalGame)
tj_final_game %>%
arrange(desc(finalGame))
tj_final_game %>%
arrange(desc(finalGame)) %>%
view()
dim(tj_final_game)
# The most recent of the final games are 2018 so I think I should remove all players with a TJ Surgery Date in 2019.
# CENSORING
# How to do the censoring is more complicated. I think classifying final games in 2018 as censored. Can reassess this
# at a later date.
# Final game is the "time of death" unless they had a second TJ which should be the "time of death".
for (i in 1:414) {
if (tj_final_game$playerID[i] == tj_final_game$playerID[i + 1]) {
print(tj_final_game$playerID[i])
}
}
# The most recent of the final games are 2018 so I think I should remove all players with a TJ Surgery Date in 2019.
# CENSORING
# How to do the censoring is more complicated. I think classifying final games in 2018 as censored. Can reassess this
# at a later date.
# Final game is the "time of death" unless they had a second TJ which should be the "time of death".
for (i in 1:413) {
if (tj_final_game$playerID[i] == tj_final_game$playerID[i + 1]) {
print(tj_final_game$playerID[i])
}
}
# The most recent of the final games are 2018 so I think I should remove all players with a TJ Surgery Date in 2019.
# CENSORING
# How to do the censoring is more complicated. I think classifying final games in 2018 as censored. Can reassess this
# at a later date.
# Final game is the "time of death" unless they had a second TJ which should be the "time of death".
for (i in 1:413) {
if (tj_final_game$playerID[i] == tj_final_game$playerID[i + 1]) {
print(tj_final_game$playerID[i])
}
}
# The most recent of the final games are 2018 so I think I should remove all players with a TJ Surgery Date in 2019.
# CENSORING
# How to do the censoring is more complicated. I think classifying final games in 2018 as censored. Can reassess this
# at a later date.
# Final game is the "time of death" unless they had a second TJ which should be the "time of death".
for (i in 1:413) {
if (tj_final_game$playerID[i] == tj_final_game$playerID[i + 1]) {
return(tj_final_game$playerID[i])
}
}
# The most recent of the final games are 2018 so I think I should remove all players with a TJ Surgery Date in 2019.
# CENSORING
# How to do the censoring is more complicated. I think classifying final games in 2018 as censored. Can reassess this
# at a later date.
# Final game is the "time of death" unless they had a second TJ which should be the "time of death".
for (i in 1:413) {
if (tj_final_game$playerID[i] == tj_final_game$playerID[i + 1]) {
print(tj_final_game$playerID[i])
}
}
# The most recent of the final games are 2018 so I think I should remove all players with a TJ Surgery Date in 2019.
# CENSORING
# How to do the censoring is more complicated. I think classifying final games in 2018 as censored. Can reassess this
# at a later date.
# Final game is the "time of death" unless they had a second TJ which should be the "time of death".
for (i in 1:413) {
if (tj_final_game$playerID[i] == tj_final_game$playerID[i + 1]) {
print(tj_final_game$playerID[i])
}
else {
print("No match")
}
}
tj_final_game %>%
duplicated(tj_final_game$Player)
tj_final_game$Player[duplicated(tj_final_game$Player) == TRUE]
# The most recent of the final games are 2018 so I think I should remove all players with a TJ Surgery Date in 2019.
# CENSORING
# How to do the censoring is more complicated. I think classifying final games in 2018 as censored. Can reassess this
# at a later date.
# Final game is the "time of death" unless they had a second TJ which should be the "time of death".
tj_final_game$Player[duplicated(tj_final_game$Player) == TRUE]
for (i in 1:413) {
if (tj_final_game$playerID[i] == tj_final_game$playerID[i + 1]) {
print(tj_final_game$playerID[i])
}
else {
print(paste("No match", i))
}
}
for (i in 1:413) {
if (tj_final_game$Player[i] == tj_final_game$Player[i + 1]) {
print(tj_final_game$Player[i])
}
else {
print(paste("No match", i))
}
}
tj_final_game %>%
arrange(Player)
tj_final_game %>%
arrange(Player) %>%
view()
for (i in 1:414) {
print(tj_final_game$Player[i])
}
for (i in 1:414) {
if (i == 100) {
print(i)
}
}
for (i in 1:413) {
if (tj_final_game$Player[i] == tj_final_game$Player[i]) {
print(tj_final_game$Player[i])
}
}
for (i in 1:413) {
if (tj_final_game$Player[i] == tj_final_game$Player[i + 1]) {
print(tj_final_game$Player[i])
}
}
for (i in 1:413) {
if (tj_final_game$Player[i] == tj_final_game$Player[(i + 1)]) {
print(tj_final_game$Player[i])
}
}
for (i in 1:413) {
if (tj_final_game$Player[i] == tj_final_game$Player[i]) {
print(tj_final_game$Player[i])
}
}
for (i in 1:413) {
if (tj_final_game$Player[i] == tj_final_game$Player[i]) {
print(i + 1)
}
}
i <- 1
i
i + 1
i <- NULL
tj_final_game
tj_final_game %>%
arrange(Player)
tj_final_game <- tj_final_game %>% arrange(Player)
tj_final_game
for (i in 1:413) {
if (tj_final_game$Player[i] == tj_final_game$Player[i + 1]) {
print(tj_final_game$Player[i])
}
}
tj_final_game
tj_final_game$event <- rep(NA, 414)
tj_final_game
for (i in 1:413) {
if (tj_final_game$Player[i] == tj_final_game$Player[i + 1]) {
print(tj_final_game$Player[i])
tj_final_game$event[i + 1] <- 1
}
}
tj_final_game
tj_final_game %>%
view()
sum(tj_final_game$event)
sum(tj_final_game$event, na.rm = TRUE)
#This marks final games in 2018 as censored
for (i in 1:414) {
if (tj_final_game$finalGame >= ymd("2018-01-01")) {
print(tj_final_game$Player)
}
}
warnings()
#This marks final games in 2018 as censored
for (i in 1:414) {
if (tj_final_game$finalGame >= "2018-01-01") {
print(tj_final_game$Player)
}
}
